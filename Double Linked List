#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}
void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        newNode->next = *head;
        (*head)->prev = newNode;
        *head = newNode;
    }
    printf("Node inserted at the beginning successfully.\n");
}
void mergeLists(struct Node** list1, struct Node** list2) {
    if (*list1 == NULL) {
        *list1 = *list2;
    } else if (*list2 != NULL) {
        struct Node* temp = *list1;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = *list2;
        (*list2)->prev = temp;
    }
    printf("Lists merged successfully.\n");
}
void reverseList(struct Node** head) {
    struct Node* current = *head;
    struct Node* prev = NULL;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        current->prev = next;
        prev = current;
        current = next;
    }
    *head = prev;
    printf("List reversed successfully.\n");
}
void deleteNode(struct Node** head, int data) {
    struct Node* current = *head;
    while (current != NULL) {
        if (current->data == data) {
            if (current->prev != NULL) {
                current->prev->next = current->next;
            } else {
                *head = current->next;
            }
            if (current->next != NULL) {
                current->next->prev = current->prev;
            }
            free(current);
            printf("Node with data %d deleted successfully.\n", data);
            return;
        }
        current = current->next;
    }
    printf("Node with data %d not found.\n", data);
}
void displayList(struct Node* head) {
    printf("Doubly Linked List: ");
    while (head != NULL) {
        printf("%d <-> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}
int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    int choice, data;
    do {
        printf("\n--- Doubly Linked List Menu ---\n");
        printf("1. Insert node at the beginning of List 1\n");
        printf("2. Merge List 2 into List 1\n");
        printf("3. Reverse List 1\n");
        printf("4. Delete a node from List 1\n");
        printf("5. Display List 1\n");
        printf("6. Quit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
    	switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                insertAtBeginning(&list1, data);
                break;
            case 2:
                mergeLists(&list1, &list2);
                break;
            case 3:
                reverseList(&list1);
                break;
            case 4:
                printf("Enter data to delete: ");
                scanf("%d", &data);
                deleteNode(&list1, data);
                break;
            case 5:
                displayList(list1);
                break;
            case 6:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 6);
    while (list1 != NULL) {
        struct Node* temp = list1;
        list1 = list1->next;
        free(temp);
    }
    while (list2 != NULL) {
        struct Node* temp = list2;
        list2 = list2->next;
        free(temp);
    }
    return 0;
}
